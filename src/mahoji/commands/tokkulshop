import { ApplicationCommandOptionType, CommandRunOptions } from 'mahoji';
import { Bank, Monsters } from 'oldschooljs';
import { addBanks, bankHasAllItemsFromBank, removeBankFromBank } from 'oldschooljs/dist/util';

import { client } from '../..';
import TokkulShopItems from '../../lib/data/buyables/tokkulBuyables';
import { KaramjaDiary, userhasDiaryTier } from '../../lib/diaries';
import { addToBuyLimitBank, getBuyLimitBank } from '../../lib/settings/settings';
import { UserSettings } from '../../lib/settings/types/UserSettings';
import { stringMatches } from '../../lib/util';
import { buyLimit } from '../../lib/util/buyLimit';
import getOSItem from '../../lib/util/getOSItem';
import { OSBMahojiCommand } from '../lib/util';
import { handleMahojiConfirmation } from '../mahojiSettings';

const { TzTokJad } = Monsters;

export const tksCommand: OSBMahojiCommand = {
	name: 'tokkulshop',
	description: 'Buy or sell items from the Tzhaar shops.',
	attributes: {
		categoryFlags: ['minion'],
		description: 'Purchase items from the Tzhaar shops using tokkul.',
		examples: ['/lms']
	},
	options: [
		{
			type: ApplicationCommandOptionType.Subcommand,
			name: 'buy',
			description: 'Buy an item in exchange for tokkul',
			options: [
				{
					name: 'name',
					description: 'The item you want to purchase.',
					type: ApplicationCommandOptionType.String,
					required: true,
					autocomplete: async (value: string) => {
						return TokkulShopItems.filter(i =>
							!value ? true : i.name.toLowerCase().includes(value.toLowerCase())
						)
							.filter(i => i.tokkulCost! > 0)
							.map(i => ({ name: i.name, value: i.name }));
					}
				},
				{
					name: 'quantity',
					description: 'The quantity you want to purchase.',
					type: ApplicationCommandOptionType.Integer,
					required: false,
					min_value: 1,
					max_value: 10_000
				}
			]
		},
		{
			type: ApplicationCommandOptionType.Subcommand,
			name: 'sell',
			description: 'Sell an item in exchange for tokkul',
			options: [
				{
					name: 'name',
					description: 'The item you want to sell.',
					type: ApplicationCommandOptionType.String,
					required: true,
					autocomplete: async (value: string) => {
						return TokkulShopItems.filter(i =>
							!value ? true : i.name.toLowerCase().includes(value.toLowerCase())
						)
							.filter(i => i.tokkulReturn! > 0)
							.map(i => ({ name: i.name, value: i.name }));
					}
				},
				{
					name: 'quantity',
					description: 'The quantity you want to sell.',
					type: ApplicationCommandOptionType.Integer,
					required: false,
					min_value: 1,
					max_value: 10_000
				}
			]
		}
	],
	run: async ({
		channelID,
		options,
		interaction,
		userID
	}: CommandRunOptions<{
		buy?: { name?: string; quantity?: number };
		sell?: { name?: string; quantity?: number };
	}>) => {
		const user = await client.fetchUser(userID.toString());
		const [hasKaramjaDiary] = await userhasDiaryTier(user, KaramjaDiary.easy);
		const userBank = user.settings.get(UserSettings.Bank);
		const inItems = new Bank();
		const outItems = new Bank();
		if (options.buy) {
			const itemToBuy = TokkulShopItems.find(i => stringMatches(i.name, options.buy?.name ?? ''));
			if (!itemToBuy || itemToBuy!.tokkulCost === undefined) {
				return "That's not a valid item you can buy.";
			}
			if (itemToBuy.requireFireCape && user.getKC(TzTokJad.id) < 1) {
				return `You are not worthy JalYt. Before you can buy an ${
					itemToBuy!.name
				}, you need to have defeated the might TzTok-Jad!`;
			}
			const quantity = options.buy?.quantity ?? 1;
			const userCost = hasKaramjaDiary ? itemToBuy.diaryTokkulCost : itemToBuy.tokkulCost;
			let cost = userCost;
			let qty = quantity;
			if (itemToBuy.buyLimitFactor && itemToBuy.tokkulCost) {
				const { amountToBuy, finalCost } = buyLimit({
					buyLimitBank: await getBuyLimitBank(user),
					increaseFactor: itemToBuy.buyLimitFactor,
					itemBeingBought: getOSItem(itemToBuy.inputItem),
					quantityBeingBought: quantity,
					baseCost: userCost!,
					absoluteLimit: Infinity
				});
				qty = amountToBuy;
				cost = finalCost;
			} else {
				cost = userCost! * quantity;
			}

			outItems.add(itemToBuy.inputItem, qty);
			inItems.add({ Tokkul: cost! });

			await handleMahojiConfirmation(
				channelID.toString(),
				userID,
				interaction,
				`Are you sure you want to spend ${inItems} on buying ${outItems}?`
			);

			if (!bankHasAllItemsFromBank(userBank, inItems.bank)) {
				return `I am sorry JalYt, but you don't have enough tokkul for that. You need **${inItems}** to buy **${outItems}**.`;
			}
			await user.settings.update(
				UserSettings.Bank,
				addBanks([outItems.bank, removeBankFromBank(userBank, inItems.bank)])
			);
			if (itemToBuy.buyLimitFactor && itemToBuy.tokkulCost) {
				await addToBuyLimitBank(user, outItems);
			}

			return `You spent ${inItems} to buy ${outItems}.`;
		}
		const itemToSell = TokkulShopItems.find(i => stringMatches(i.name, options.sell?.name ?? ''));
		if (!itemToSell) {
			return "That's not a valid item you can sell.";
		}
		if (itemToSell.requireFireCape && user.getKC(TzTokJad.id) < 1) {
			return `You are not worthy JalYt. Before you can sell an ${
				itemToSell!.name
			}, you need to have defeated the might TzTok-Jad!`;
		}
		let quantity = options.sell!.quantity ?? userBank[itemToSell.inputItem] ?? 1;
		quantity = Math.min(10_000, quantity);
		const tokkulReturn = hasKaramjaDiary ? itemToSell.diaryTokkulReturn : itemToSell.tokkulReturn;
		inItems.add({ [itemToSell.inputItem]: quantity });
		outItems.add({ Tokkul: quantity * tokkulReturn! });
		await handleMahojiConfirmation(
			channelID.toString(),
			userID,
			interaction,
			`Are you sure you want to sell ${inItems} for ${outItems}?`
		);
		if (!bankHasAllItemsFromBank(userBank, inItems.bank)) {
			return `I am sorry JalYt, but you don't have enough items for that. You need **${inItems}** to sell for **${outItems}**.`;
		}
		await user.settings.update(
			UserSettings.Bank,
			addBanks([outItems.bank, removeBankFromBank(userBank, inItems.bank)])
		);
		return `You sold ${inItems} for ${outItems}.`;
	}
};
