<script is:inline>
	StarlightThemeProvider.updatePickers();
</script>

<script>
type Theme = 'auto' | 'dark' | 'light';
const storageKey = 'starlight-theme';
const parseTheme = (theme: unknown): Theme => theme === 'auto' || theme === 'dark' || theme === 'light' ? theme : 'auto';

const loadTheme = (): Theme => parseTheme(typeof localStorage !== 'undefined' && localStorage.getItem(storageKey));

function onThemeChange(theme: Theme): void {
	document.documentElement.dataset.theme = theme === 'auto' ? getPreferredColorScheme() : theme;
	storeTheme(theme);

	document.documentElement.setAttribute('data-theme', theme);
	const toggle = document.querySelector('#theme-toggle');
	if (toggle) toggle.setAttribute('aria-label', theme);
	else console.error('No theme toggle found');
}

function storeTheme(theme: Theme): void {
	if (typeof localStorage !== 'undefined') {
		localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '');
	}
}

const getPreferredColorScheme = (): Theme =>
	matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
	matchMedia(`(prefers-color-scheme: light)`).addEventListener('change', () => {
	if (loadTheme() === 'auto') onThemeChange('auto');
});

if (typeof window !== 'undefined') {
  window.onload = () => {
   const toggle = document.querySelector('#theme-toggle');
   if (toggle) toggle.addEventListener('click', () => onThemeChange(loadTheme() === "light" ? "dark" : "light"));
   else console.error('No theme toggle found');

   onThemeChange(loadTheme());
  };
}
</script>

<button class="theme-toggle" id="theme-toggle" title="Toggles light & dark" aria-label="auto" aria-live="polite">
  <svg class="sun-and-moon" aria-hidden="true" width="24" height="24" viewBox="0 0 24 24">
    <mask class="moon" id="moon-mask">
      <rect x="0" y="0" width="100%" height="100%" fill="white" />
      <circle cx="24" cy="10" r="6" fill="black" />
    </mask>
    <circle class="sun" cx="12" cy="12" r="6" mask="url(#moon-mask)" fill="currentColor" />
    <g class="sun-beams" stroke="currentColor">
      <line x1="12" y1="1" x2="12" y2="3" />
      <line x1="12" y1="21" x2="12" y2="23" />
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
      <line x1="1" y1="12" x2="3" y2="12" />
      <line x1="21" y1="12" x2="23" y2="12" />
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
    </g>
  </svg>
</button> 
<style is:global>
#theme-toggle {
  height: 32px;
  width: 32px;
}

.sun-and-moon > :is(.moon, .sun, .sun-beams) {
  transform-origin: center;
  height: 32px;
  width: 32px;
  fill: var(--sl-icon-color);
  stroke: var(--sl-icon-color);
}

.sun-and-moon > .sun-beams {
  stroke: var(--sl-icon-color);
  stroke-width: 2px;
}

.theme-toggle:is(:hover, :focus-visible) .sun-and-moon > .sun-beams {
  stroke: var(--sl-icon-color-hover);
}

[data-theme="dark"] .sun-and-moon > .sun {
  transform: scale(1.75);
}

[data-theme="dark"] .sun-and-moon > .sun-beams {
  opacity: 0;
}

[data-theme="dark"] .sun-and-moon > .moon > circle {
  transform: translateX(-7px);
}

@supports (cx: 1) {
  [data-theme="dark"] .sun-and-moon > .moon > circle {
    cx: 17;
    transform: translateX(0);
  }
}

@media (prefers-reduced-motion: no-preference) {
  .sun-and-moon > .sun {
    transition: transform .5s var(--ease-elastic-3);
  }

  .sun-and-moon > .sun-beams {
    transition: transform .5s var(--ease-elastic-4), opacity .5s var(--ease-3);
  }

  .sun-and-moon .moon > circle {
    transition: transform .25s var(--ease-out-5);
  }

  @supports (cx: 1) {
    .sun-and-moon .moon > circle {
      transition: cx .25s var(--ease-out-5);
    }
  }

  [data-theme="dark"] .sun-and-moon > .sun {
    transition-timing-function: var(--ease-3);
    transition-duration: .25s;
    transform: scale(1.75);
  }

  [data-theme="dark"] .sun-and-moon > .sun-beams {
    transition-duration: .15s;
    transform: rotateZ(-25deg);
  }

  [data-theme="dark"] .sun-and-moon > .moon > circle {
    transition-duration: .5s;
    transition-delay: .25s;
  }
}
</style>